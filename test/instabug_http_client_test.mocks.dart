// Mocks generated by Mockito 5.4.2 from annotations
// in instabug_http_client/test/instabug_http_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i9;

import 'package:http/http.dart' as _i4;
import 'package:instabug_flutter/instabug_flutter.dart' as _i3;
import 'package:instabug_http_client/src/instabug_http_client.dart' as _i6;
import 'package:instabug_http_client/src/instabug_http_log_filter.dart' as _i2;
import 'package:instabug_http_client/src/instabug_http_logger.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInstabugHttpLogFilter_0 extends _i1.SmartFake
    implements _i2.InstabugHttpLogFilter {
  _FakeInstabugHttpLogFilter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkLogger_1 extends _i1.SmartFake implements _i3.NetworkLogger {
  _FakeNetworkLogger_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_2 extends _i1.SmartFake implements _i4.Client {
  _FakeClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInstabugHttpLogger_3 extends _i1.SmartFake
    implements _i5.InstabugHttpLogger {
  _FakeInstabugHttpLogger_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InstabugHttpLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstabugHttpLogger extends _i1.Mock
    implements _i5.InstabugHttpLogger {
  MockInstabugHttpLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InstabugHttpLogFilter get logFilter => (super.noSuchMethod(
        Invocation.getter(#logFilter),
        returnValue: _FakeInstabugHttpLogFilter_0(
          this,
          Invocation.getter(#logFilter),
        ),
      ) as _i2.InstabugHttpLogFilter);

  @override
  _i3.NetworkLogger get networkLogger => (super.noSuchMethod(
        Invocation.getter(#networkLogger),
        returnValue: _FakeNetworkLogger_1(
          this,
          Invocation.getter(#networkLogger),
        ),
      ) as _i3.NetworkLogger);

  @override
  set networkLogger(_i3.NetworkLogger? _networkLogger) => super.noSuchMethod(
        Invocation.setter(
          #networkLogger,
          _networkLogger,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onLogger(
    _i4.Response? response, {
    required DateTime? startTime,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onLogger,
          [response],
          {#startTime: startTime},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [InstabugHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstabugHttpClient extends _i1.Mock
    implements _i6.InstabugHttpClient {
  MockInstabugHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_2(
          this,
          Invocation.getter(#client),
        ),
      ) as _i4.Client);

  @override
  _i5.InstabugHttpLogger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeInstabugHttpLogger_3(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.InstabugHttpLogger);

  @override
  set logger(_i5.InstabugHttpLogger? _logger) => super.noSuchMethod(
        Invocation.setter(
          #logger,
          _logger,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.InstabugHttpLogFilter get logFilter => (super.noSuchMethod(
        Invocation.getter(#logFilter),
        returnValue: _FakeInstabugHttpLogFilter_0(
          this,
          Invocation.getter(#logFilter),
        ),
      ) as _i2.InstabugHttpLogFilter);

  @override
  _i3.NetworkLogger get networkLogger => (super.noSuchMethod(
        Invocation.getter(#networkLogger),
        returnValue: _FakeNetworkLogger_1(
          this,
          Invocation.getter(#networkLogger),
        ),
      ) as _i3.NetworkLogger);

  @override
  set networkLogger(_i3.NetworkLogger? _networkLogger) => super.noSuchMethod(
        Invocation.setter(
          #networkLogger,
          _networkLogger,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i9.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
      ) as _i7.Future<_i9.Uint8List>);

  @override
  _i7.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i4.StreamedResponse>);

  @override
  void onLogger(
    _i4.Response? response, {
    required DateTime? startTime,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onLogger,
          [response],
          {#startTime: startTime},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NetworkLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkLogger extends _i1.Mock implements _i3.NetworkLogger {
  @override
  _i7.Future<void> networkLog(_i3.NetworkData? data) => (super.noSuchMethod(
        Invocation.method(
          #networkLog,
          [data],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
